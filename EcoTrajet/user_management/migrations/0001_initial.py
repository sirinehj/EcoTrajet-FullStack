# Generated by Django 5.2.3 on 2025-07-02 09:09

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('idUser', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(help_text="Nom de famille de l'utilisateur", max_length=100)),
                ('prenom', models.CharField(help_text="Prénom de l'utilisateur", max_length=100)),
                ('email', models.EmailField(help_text='Adresse email (utilisée comme identifiant)', max_length=254, unique=True)),
                ('role', models.CharField(choices=[('passager', 'Passager'), ('conducteur', 'Conducteur'), ('admin', 'Admin')], default='passager', help_text="Rôle de l'utilisateur dans le système", max_length=20)),
                ('trajet_prefere', models.CharField(blank=True, help_text="Trajet préféré de l'utilisateur", max_length=255, null=True)),
                ('paiement_prefere', models.CharField(blank=True, choices=[('carte', 'Carte'), ('paypal', 'PayPal'), ('cash', 'Cash'), ('virement', 'Virement')], help_text='Mode de paiement préféré', max_length=20, null=True)),
                ('telephone', models.CharField(blank=True, help_text='Numéro de téléphone', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'utilisateur est actif")),
                ('is_staff', models.BooleanField(default=False, help_text="Indique si l'utilisateur peut accéder à l'interface d'administration")),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['nom', 'prenom'],
            },
        ),
        migrations.CreateModel(
            name='UserLoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('success', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Vehicule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idVehicule', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('license_plate', models.CharField(help_text="Numéro de plaque d'immatriculation", max_length=20, unique=True)),
                ('make', models.CharField(help_text='Marque du véhicule', max_length=50)),
                ('model', models.CharField(help_text='Modèle du véhicule', max_length=50)),
                ('couleur', models.CharField(help_text='Couleur du véhicule', max_length=30)),
                ('number_of_seats', models.PositiveIntegerField(help_text='Nombre de places disponibles (1-9)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9)])),
                ('is_active', models.BooleanField(default=True, help_text='Véhicule actif pour les trajets')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('owner', models.ForeignKey(help_text='Propriétaire du véhicule', on_delete=django.db.models.deletion.CASCADE, related_name='vehicules', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'vehicule',
                'verbose_name_plural': 'véhicules',
                'db_table': 'vehicule',
                'ordering': ['-created_at'],
            },
        ),
    ]
